; L1b
; 8 return the list of nodes of a tree of type (2) accessed inorder

; traverse(L - list)
; traverse(l1 l2 l3...ln) = nil if the list is null
                    ; traverse(l2) U [l1] U traverse(l3) otherwise
(defun traverse(arr)
    (cond 
        ((null (car arr)) nil )
        (T(append (traverse (cadr arr)) (list (car arr)) (traverse (caddr arr)))
        )
    )
)


(print(traverse '(A (B) (C (D) (E)))))