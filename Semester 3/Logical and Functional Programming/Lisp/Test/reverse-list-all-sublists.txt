; b. reverse a list with its all sublists,on all levels

; myAppend(L- list, M - list)
; myAppend(l1...ln, m1...mn) = m1...mn if the first array is null
                             ; l1 U myAppend(l2...ln m1...mn) otherwise
(defun myAppend(arr1 arr2)
    (if(null arr1) arr2
       (cons(car arr1)(myAppend(cdr arr1) arr2))
    )
)

; myReverse(l1...ln) = nil if the list is null
                    ;  myAppend(myReverse(l2...ln), [myReverse(l1)]) if l1 is a list
                    ;  myAppend(myReverse(l2...ln), [l1]) otherwise

(defun myReverse(arr)
    (cond
        ((null arr) nil)
        ((listp(car arr)) (myAppend(myReverse (cdr arr)) (list (myReverse(car arr)))))
        (T (myAppend(myReverse(cdr arr)) (list(car arr))))
    )
)

(print (myReverse '(1 2 (3 (4 5) (6 7)) 8 (9 10 11))))
; ((11 10 9) 8 ((7 6) (5 4) 3) 2 1) 