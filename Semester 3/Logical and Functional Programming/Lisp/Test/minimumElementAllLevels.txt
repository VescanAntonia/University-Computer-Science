;return the minimum numerical atom of a list on any levels
;Mathematical model
;myMini(a,b) = nil if a and b are not numbers
             ; b if a is not a number
             ;a if b is not a number
             ; a if a<b
             ; b otherwise

(defun myMini(a b)
  (cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp a)) b)
    ((not (numberp b)) a)
    ((< a b) a)
    (t b)
  )
)

;getMini(l1...ln) = l1 if the list has only one element and the element is an atom
                   ;myMini(getMini(l1),getMini(l2...ln)) if l1 is a list
                   ;myMini(l1,getMini(l2...ln)) otherwise

(defun getMini(arr)
    (cond
        ((and (null(cdr arr)) (atom(car arr))) (car arr))
        ((listp(car arr)) (myMini (getMini(car arr)) (getMini(cdr arr))))
        (T(myMini (car arr) (getMini(cdr arr))))
        )
)

(print(getMini '(5 8 7 (4 5) 8 (2))))