(defun min_nb (a b)
    (if (> a b) a b)
)


(defun min_num (l)
    (cond
        ((null l) 999999)
        ((and (null (cdr l)) (numberp (car l))) (car l))
        ((numberp (car l)) (min_nb (car l) (min_num (cdr l))))
        ((listp (car l)) (min (min_num (car l)) (min_num (cdr l))))
        (t (min_num (cdr l)))
     )
)

(print (min_num '(1 2 (3 (a) (1 3)) 4 5)))
; => 1;Mathematical model
;getMaxi = nil if a and b are not numbers
        ; a if b is not a number
        ; b if a is not a number
        ; a if a>b
        ; b otherwise

(defun getMaxi(a b)
    (cond
        ((and(not(numberp a)) (not(numberp b))) nil)
        ((not(numberp b))a)
        ((not (numberp a))b)
        ((> a b) a)
        ( T b)
        
        )
    
)


; findMaxim(l1...ln) = l1 if the list has only one element and l1 is an atom
                      ;getMaxi(findMaxim(l1),findMaxim(l2...ln))
                      ;getMaxi(l1,findMaxim(l2...ln)) otherwise

(defun findMaxim(arr)
    (cond
        ((and(null (cdr arr)) (atom (car arr))) (car arr) )
        (T (getMaxi (car arr) (findMaxim(cdr arr))))
        
        )
    
)


(defun remove-occurences (l)
	(cond
		((null l) nil)
		((= (car l) (findMaxim l)) (remove-occurences (cdr l) ))
		(T (cons (car l) (remove-occurences (cdr l))))
	)
)

(print(remove-occurences '(2 5  1 5)))