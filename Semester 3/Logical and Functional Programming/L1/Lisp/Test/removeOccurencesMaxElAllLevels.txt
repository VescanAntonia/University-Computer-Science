;return the maximum value of all atoms on all levels

;Mathematical model
;getMaxi = nil if a and b are not numbers
        ; a if b is not a number
        ; b if a is not a number
        ; a if a>b
        ; b otherwise

(defun getMaxi(a b)
    (cond
        ((and(not(numberp a)) (not(numberp b))) nil)
        ((not(numberp b))a)
        ((not (numberp a))b)
        ((> a b) a)
        ( T b)
        
        )
    
)

; findMaxim(l1...ln) = l1 if the list has only one element and l1 is an atom
                      ;getMaxi(findMaxim(l1),findMaxim(l2...ln))
                      ;getMaxi(l1,findMaxim(l2...ln)) otherwise

(defun findMaxim(arr)
    (cond
        ((and(null (cdr arr)) (atom (car arr))) (car arr) )
        ((listp (car arr)) (getMaxi(findMaxim(car arr)) (findMaxim(cdr arr))))
        (T (getMaxi (car arr) (findMaxim(cdr arr))))
        
        )
    
)

;removeOcc(l1..ln, el) = nil if the list is empty
                        ; removeOcc(l2...ln,el) if l1 is a number and l1=el
                        ;removeOcc(l1,el) U removeOcc(l2...ln,el) if l1 is a list
                        ;l1 U removeOcc(l2...ln, el)

(defun removeOcc(arr el)
    (cond
    ((null arr) nil)
    ((and(numberp (car arr)) (= (car arr) el)) (removeOcc(cdr arr) el))
    ((listp (car arr)) (cons (removeOcc (car arr) el) (removeOcc(cdr arr) el)))
    (T(cons (car arr) (removeOcc (cdr arr) el)))   
    )
)

;main(l1..ln) = removeOcc(l1...ln, (findMaxim(l1...ln)))
(defun main(arr)
   (cond
    ((removeOcc arr (findMaxim arr)))
    )
    )

(print(main'(8 9 86 (85 4) 10 (85 86))))