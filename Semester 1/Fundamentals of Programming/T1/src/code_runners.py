"""
Implement the solution here. 
You may add other source files.
Make sure you commit & push the source code before the end of the test.

Solutions using user-defined classes will not be graded.
"""
import time
import random

"Non_UI"


def check_the_validity_number(number,numbers):
    if number/1000 ==0:
        raise ValueError("invalid number!")
    n=number
    if n%10!=n/10%10 and n/10!=n/10%10 and n%10!=n/100%10 and n/100%10!=n/10%10 and n/100!=n/100%10 and n%10!=n/1000 and n/1000!=n/100%10\
            and number not in numbers:
        numbers.append(number)
        return True
    else:
        raise ValueError("The number is not valid!")


def check_if_games_ends(number, numbers):
    return True


def check_the_validity_use_number(number,numbers):
    if number/1000 ==0:
        raise ValueError("invalid number!")
    n=number
    if n%10!=n/10%10 and n/10!=n/10%10 and n%10!=n/100%10 and n/100%10!=n/10%10 and n/100!=n/100%10 and n%10!=n/1000 and n/1000!=n/100%10\
            and number not in numbers:
        numbers.append(number)
        return True
    else:
        return False

def computer_number(numbers):
    """
    Generates randomly the computer number and checks its validity in order to return a valid one
    :return: The number generated by the computer
    """
    computer__number = 0
    validity = False
    while not validity:                                    # while the number its not valid it
        computer__number = random.randint(1000, 9999)    # randomly generates a four digit number
        validity = check_the_validity_use_number(computer__number, numbers)  # checks the validity
    return computer__number

"UI"


def read_number(numbers):
    x = int(input("X="))
    if x == 8086:
        print(numbers[len(numbers)-1])
        y = 1
        return y
    else:
        return x


def start():
    numbers = []
    start_time = time.time()
    end_time=0
    is_it_ending = 0
    is_human_turn = False

    while end_time-start_time < 60 and is_it_ending ==0 :

        try:
            if is_human_turn:
                number = read_number(numbers)
                if number == 1:
                    is_it_ending = 1
                    print("The secret number was introduced! You win!")
                    return
                if not check_the_validity_use_number(number, numbers):
                    is_it_ending = 2
                    print("computer wins")
                    return

                end_time = time.time()
            else:
                generated_number= computer_number(numbers)
            is_human_turn = not is_human_turn
        except ValueError as ve:
            print(str(ve))

    if end_time-start_time>60:
        if is_human_turn:
            print("Computer wins!")
        else:
            print("You win!")
    elif is_it_ending ==1:
        print("you win!")
    elif is_it_ending == 2:
        print("computer wins!")


start()